# 워크플로우 이름
name: pixl.js-fw

# 워크플로우 실행 조건
on:
  push:
    # main, master, develop, neo_v2 브랜치에 push 할 때 빌드 실행
    branches: ["main", "master", "develop", "neo_v2"]
    tags: ["*"]
  pull_request:
    types: ["opened"]
    branches: ["develop"]
  workflow_dispatch:

# 실행될 작업(Job) 정의
jobs:
  build:
    strategy:
      matrix:
        board: ["LCD", "OLED"] # LCD와 OLED 보드에 대해 각각 실행
    runs-on: ubuntu-latest
    container: solosky/nrf52-sdk:latest # nRF52 SDK가 포함된 Docker 컨테이너 사용
    steps:
      # 1. 리포지토리 코드 체크아웃 (서브모듈 포함)
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      # 2. 컨테이너 작업 디렉토리 소유자 변경
      - name: Change Owner of Container Working Directory
        run: chown root:root .

      # 3. Python 의존성 라이브러리 설치 (가장 중요한 수정 부분)
      - name: Install Python dependencies
        # Pillow(이미지 처리), thefuzz(퍼지 매칭), python-levenshtein(성능 향상) 라이브러리를 설치합니다.
        run: pip install Pillow thefuzz python-levenshtein

      # 4. 데이터 파일 생성
      - name: Generate data files
        # 펌웨어 빌드 전, 모든 데이터 생성 스크립트를 실행합니다.
        run: make -C fw/application/ gen

      # 5. 펌웨어 빌드
      - name: build firmware
        run: cd fw && make all RELEASE=1 APP_VERSION=$GITHUB_RUN_NUMBER BOARD=${{matrix.board}}

      # 6. 빌드 결과물(아티팩트) 복사
      - name: copy artifact
        run: mv fw/_build/bootloader.hex . && mv fw/_build/pixljs.hex . && mv fw/_build/pixljs_all.hex . && mv fw/_build/pixjs_ota_v${{github.run_number}}.zip . && mv fw/docs/fw_readme.txt . && mv fw/scripts/fw_update.bat .

      # 7. 아티팩트 업로드
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pixljs_fw_${{matrix.board}}
          path: |
            bootloader.hex
            pixljs.hex
            pixljs_all.hex
            pixjs_ota_v${{github.run_number}}.zip
            fw_readme.txt
            fw_update.bat
